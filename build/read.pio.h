// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// read_gpio //
// --------- //

#define read_gpio_wrap_target 0
#define read_gpio_wrap 0
#define read_gpio_pio_version 0

static const uint16_t read_gpio_program_instructions[] = {
            //     .wrap_target
    0x00c1, //  0: jmp    pin, 1
            //     .wrap
    0xa042, //  1: nop
    0x4010, //  2: in     pins, 16
    0x00c3, //  3: jmp    pin, 3
    0x0000, //  4: jmp    0
};

#if !PICO_NO_HARDWARE
static const struct pio_program read_gpio_program = {
    .instructions = read_gpio_program_instructions,
    .length = 5,
    .origin = -1,
    .pio_version = read_gpio_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config read_gpio_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + read_gpio_wrap_target, offset + read_gpio_wrap);
    return c;
}

static inline void read_gpio_program_init(PIO pio, uint sm, uint offset, uint firstPin, uint countPins, uint triggerPin){
    pio_sm_config c = read_gpio_program_get_default_config(offset);
    sm_config_set_in_pins(&c, firstPin);
    for (uint i = 0; i < countPins; i++){
        pio_gpio_init(pio, firstPin + i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, firstPin, countPins, false);
    sm_config_set_jmp_pin(&c, triggerPin);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_in_shift(&c, false, true, countPins);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

